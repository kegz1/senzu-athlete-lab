{"version":3,"file":"index-DRkeHaIO.js","sources":["../../src/components/SportSelection.js","../../src/components/Parameters.js","../../node_modules/marked/lib/marked.esm.js","../../src/components/Results.js","../../src/components/Toggle.js","../../src/api/apiService.js","../../src/App.js","../../src/index.js"],"sourcesContent":["class SportSelection {\n  constructor(container) {\n    this.container = container;\n    this.sportsData = {\n      'endurance': {\n        label: 'Endurance Sports',\n        sports: [\n          { id: 'marathon', name: 'Marathon Running' },\n          { id: 'cycling', name: 'Cycling' },\n          { id: 'triathlon', name: 'Triathlon' },\n          { id: 'swimming', name: 'Swimming' },\n          { id: 'ultradistance', name: 'Ultra-Distance Events' }\n        ]\n      },\n      'strength': {\n        label: 'Strength & Power Sports',\n        sports: [\n          { id: 'powerlifting', name: 'Powerlifting' },\n          { id: 'olympic_weightlifting', name: 'Olympic Weightlifting' },\n          { id: 'bodybuilding', name: 'Bodybuilding' },\n          { id: 'strongman', name: 'Strongman' },\n          { id: 'crossfit', name: 'CrossFit' }\n        ]\n      },\n      'team': {\n        label: 'Team Sports',\n        sports: [\n          { id: 'soccer', name: 'Soccer/Football' },\n          { id: 'basketball', name: 'Basketball' },\n          { id: 'volleyball', name: 'Volleyball' },\n          { id: 'hockey', name: 'Hockey' },\n          { id: 'rugby', name: 'Rugby' },\n          { id: 'american_football', name: 'American Football' }\n        ]\n      },\n      'combat': {\n        label: 'Combat Sports',\n        sports: [\n          { id: 'boxing', name: 'Boxing' },\n          { id: 'mma', name: 'Mixed Martial Arts' },\n          { id: 'bjj', name: 'Brazilian Jiu-Jitsu' },\n          { id: 'wrestling', name: 'Wrestling' },\n          { id: 'judo', name: 'Judo' }\n        ]\n      },\n      'racket': {\n        label: 'Racket Sports',\n        sports: [\n          { id: 'tennis', name: 'Tennis' },\n          { id: 'badminton', name: 'Badminton' },\n          { id: 'squash', name: 'Squash' },\n          { id: 'table_tennis', name: 'Table Tennis' },\n          { id: 'pickleball', name: 'Pickleball' }\n        ]\n      },\n      'outdoor': {\n        label: 'Outdoor/Adventure Sports',\n        sports: [\n          { id: 'climbing', name: 'Rock Climbing' },\n          { id: 'hiking', name: 'Hiking/Trekking' },\n          { id: 'surfing', name: 'Surfing' },\n          { id: 'kayaking', name: 'Kayaking' },\n          { id: 'mountain_biking', name: 'Mountain Biking' }\n        ]\n      },\n      'precision': {\n        label: 'Precision Sports',\n        sports: [\n          { id: 'golf', name: 'Golf' },\n          { id: 'archery', name: 'Archery' },\n          { id: 'shooting', name: 'Shooting' },\n          { id: 'billiards', name: 'Billiards/Pool' },\n          { id: 'bowling', name: 'Bowling' }\n        ]\n      },\n      'winter': {\n        label: 'Winter Sports',\n        sports: [\n          { id: 'skiing', name: 'Alpine Skiing' },\n          { id: 'snowboarding', name: 'Snowboarding' },\n          { id: 'ice_hockey', name: 'Ice Hockey' },\n          { id: 'figure_skating', name: 'Figure Skating' },\n          { id: 'speed_skating', name: 'Speed Skating' }\n        ]\n      }\n    };\n    \n    this.categorySelect = null;\n    this.specificSelect = null;\n  }\n  \n  render() {\n    this.container.innerHTML = '';\n    \n    // Create form row for side-by-side layout\n    const formRow = document.createElement('div');\n    formRow.className = 'form-row';\n    \n    // Create category selection\n    const categoryDiv = document.createElement('div');\n    categoryDiv.className = 'form-group';\n    \n    const categoryLabel = document.createElement('label');\n    categoryLabel.textContent = 'Sport Category:';\n    categoryLabel.setAttribute('for', 'category-select');\n    \n    this.categorySelect = document.createElement('select');\n    this.categorySelect.id = 'category-select';\n    this.categorySelect.innerHTML = '<option value=\"\">Select a category</option>';\n    \n    Object.entries(this.sportsData).forEach(([key, value]) => {\n      const option = document.createElement('option');\n      option.value = key;\n      option.textContent = value.label;\n      this.categorySelect.appendChild(option);\n    });\n    \n    this.categorySelect.addEventListener('change', this.handleCategoryChange.bind(this));\n    \n    categoryDiv.appendChild(categoryLabel);\n    categoryDiv.appendChild(this.categorySelect);\n    \n    // Create specific sport selection\n    const specificDiv = document.createElement('div');\n    specificDiv.className = 'form-group';\n    \n    const specificLabel = document.createElement('label');\n    specificLabel.textContent = 'Specific Sport:';\n    specificLabel.setAttribute('for', 'specific-select');\n    \n    this.specificSelect = document.createElement('select');\n    this.specificSelect.id = 'specific-select';\n    this.specificSelect.innerHTML = '<option value=\"\">Select a sport</option>';\n    this.specificSelect.disabled = true;\n    \n    specificDiv.appendChild(specificLabel);\n    specificDiv.appendChild(this.specificSelect);\n    \n    // Add both form groups to the form row\n    formRow.appendChild(categoryDiv);\n    formRow.appendChild(specificDiv);\n    \n    // Add the form row to the container\n    this.container.appendChild(formRow);\n  }\n  \n  handleCategoryChange() {\n    const selectedCategory = this.categorySelect.value;\n    \n    // Reset and enable/disable the specific sport dropdown\n    this.specificSelect.innerHTML = '<option value=\"\">Select a specific sport</option>';\n    \n    if (selectedCategory) {\n      this.specificSelect.disabled = false;\n      \n      // Populate specific sports based on selected category\n      this.sportsData[selectedCategory].sports.forEach(sport => {\n        const option = document.createElement('option');\n        option.value = sport.id;\n        option.textContent = sport.name;\n        this.specificSelect.appendChild(option);\n      });\n    } else {\n      this.specificSelect.disabled = true;\n    }\n  }\n  \n  getSelectedSport() {\n    const categoryValue = this.categorySelect.value;\n    const sportValue = this.specificSelect.value;\n    \n    if (!categoryValue || !sportValue) {\n      return null;\n    }\n    \n    const category = this.sportsData[categoryValue];\n    const sport = category.sports.find(s => s.id === sportValue);\n    \n    return {\n      category: {\n        id: categoryValue,\n        name: category.label\n      },\n      sport: {\n        id: sport.id,\n        name: sport.name\n      }\n    };\n  }\n}\n\nexport default SportSelection;","class Parameters {\n  constructor(container) {\n    this.container = container;\n    \n    this.experienceLevels = [\n      { id: 'beginner', name: 'Beginner' },\n      { id: 'intermediate', name: 'Intermediate' },\n      { id: 'advanced', name: 'Advanced' },\n      { id: 'elite', name: 'Elite' }\n    ];\n    \n    this.trainingGoals = [\n      { id: 'performance', name: 'Performance Improvement' },\n      { id: 'endurance', name: 'Endurance Development' },\n      { id: 'strength', name: 'Strength Building' },\n      { id: 'skill', name: 'Skill Development' },\n      { id: 'weight_loss', name: 'Weight Management' },\n      { id: 'rehab', name: 'Recovery/Rehabilitation' },\n      { id: 'competition', name: 'Competition Preparation' }\n    ];\n    \n    this.equipmentOptions = [\n      { id: 'full_gym', name: 'Full Gym Access' },\n      { id: 'home_basic', name: 'Basic Home Equipment' },\n      { id: 'bodyweight', name: 'Bodyweight Only' },\n      { id: 'specialty', name: 'Specialty Equipment' }\n    ];\n    \n    this.experienceSelect = null;\n    this.goalSelect = null;\n    this.equipmentSelect = null;\n    this.frequencySelect = null;\n    this.specialConsiderations = null;\n  }\n  \n  render() {\n    this.container.innerHTML = '';\n    \n    // First row: Experience Level and Training Goal\n    const row1 = document.createElement('div');\n    row1.className = 'form-row';\n    \n    // Experience Level\n    const experienceDiv = document.createElement('div');\n    experienceDiv.className = 'form-group';\n    \n    const experienceLabel = document.createElement('label');\n    experienceLabel.textContent = 'Experience Level:';\n    experienceLabel.setAttribute('for', 'experience-select');\n    \n    this.experienceSelect = document.createElement('select');\n    this.experienceSelect.id = 'experience-select';\n    this.experienceSelect.innerHTML = '<option value=\"\">Select experience level</option>';\n    \n    this.experienceLevels.forEach(level => {\n      const option = document.createElement('option');\n      option.value = level.id;\n      option.textContent = level.name;\n      this.experienceSelect.appendChild(option);\n    });\n    \n    experienceDiv.appendChild(experienceLabel);\n    experienceDiv.appendChild(this.experienceSelect);\n    \n    // Training Goal\n    const goalDiv = document.createElement('div');\n    goalDiv.className = 'form-group';\n    \n    const goalLabel = document.createElement('label');\n    goalLabel.textContent = 'Primary Training Goal:';\n    goalLabel.setAttribute('for', 'goal-select');\n    \n    this.goalSelect = document.createElement('select');\n    this.goalSelect.id = 'goal-select';\n    this.goalSelect.innerHTML = '<option value=\"\">Select primary goal</option>';\n    \n    this.trainingGoals.forEach(goal => {\n      const option = document.createElement('option');\n      option.value = goal.id;\n      option.textContent = goal.name;\n      this.goalSelect.appendChild(option);\n    });\n    \n    goalDiv.appendChild(goalLabel);\n    goalDiv.appendChild(this.goalSelect);\n    \n    // Add to first row\n    row1.appendChild(experienceDiv);\n    row1.appendChild(goalDiv);\n    this.container.appendChild(row1);\n    \n    // Second row: Equipment Available and Training Frequency\n    const row2 = document.createElement('div');\n    row2.className = 'form-row';\n    \n    // Equipment Available\n    const equipmentDiv = document.createElement('div');\n    equipmentDiv.className = 'form-group';\n    \n    const equipmentLabel = document.createElement('label');\n    equipmentLabel.textContent = 'Equipment Available:';\n    equipmentLabel.setAttribute('for', 'equipment-select');\n    \n    this.equipmentSelect = document.createElement('select');\n    this.equipmentSelect.id = 'equipment-select';\n    this.equipmentSelect.innerHTML = '<option value=\"\">Select equipment</option>';\n    \n    this.equipmentOptions.forEach(equipment => {\n      const option = document.createElement('option');\n      option.value = equipment.id;\n      option.textContent = equipment.name;\n      this.equipmentSelect.appendChild(option);\n    });\n    \n    equipmentDiv.appendChild(equipmentLabel);\n    equipmentDiv.appendChild(this.equipmentSelect);\n    \n    // Training Frequency\n    const frequencyDiv = document.createElement('div');\n    frequencyDiv.className = 'form-group';\n    \n    const frequencyLabel = document.createElement('label');\n    frequencyLabel.textContent = 'Training Frequency (days per week):';\n    frequencyLabel.setAttribute('for', 'frequency-select');\n    \n    this.frequencySelect = document.createElement('select');\n    this.frequencySelect.id = 'frequency-select';\n    this.frequencySelect.innerHTML = '<option value=\"\">Select frequency</option>';\n    \n    for (let i = 1; i <= 7; i++) {\n      const option = document.createElement('option');\n      option.value = i;\n      option.textContent = i;\n      this.frequencySelect.appendChild(option);\n    }\n    \n    frequencyDiv.appendChild(frequencyLabel);\n    frequencyDiv.appendChild(this.frequencySelect);\n    \n    // Add to second row\n    row2.appendChild(equipmentDiv);\n    row2.appendChild(frequencyDiv);\n    this.container.appendChild(row2);\n    \n    // Special Considerations (full width)\n    const considerationsDiv = document.createElement('div');\n    considerationsDiv.className = 'form-group';\n    \n    const considerationsLabel = document.createElement('label');\n    considerationsLabel.textContent = 'Special Considerations (optional):';\n    considerationsLabel.setAttribute('for', 'considerations-textarea');\n    \n    this.specialConsiderations = document.createElement('textarea');\n    this.specialConsiderations.id = 'considerations-textarea';\n    this.specialConsiderations.rows = 3;\n    this.specialConsiderations.placeholder = 'Enter any injuries, limitations, or special requirements...';\n    \n    considerationsDiv.appendChild(considerationsLabel);\n    considerationsDiv.appendChild(this.specialConsiderations);\n    this.container.appendChild(considerationsDiv);\n  }\n  \n  getParametersData() {\n    const experienceValue = this.experienceSelect.value;\n    const goalValue = this.goalSelect.value;\n    const equipmentValue = this.equipmentSelect.value;\n    const frequencyValue = this.frequencySelect.value;\n    const considerationsValue = this.specialConsiderations.value;\n    \n    let experienceLabel = '';\n    let goalLabel = '';\n    let equipmentLabel = '';\n    \n    if (experienceValue) {\n      const experience = this.experienceLevels.find(e => e.id === experienceValue);\n      if (experience) experienceLabel = experience.name;\n    }\n    \n    if (goalValue) {\n      const goal = this.trainingGoals.find(g => g.id === goalValue);\n      if (goal) goalLabel = goal.name;\n    }\n    \n    if (equipmentValue) {\n      const equipment = this.equipmentOptions.find(e => e.id === equipmentValue);\n      if (equipment) equipmentLabel = equipment.name;\n    }\n    \n    return {\n      experience: experienceValue,\n      experienceLabel: experienceLabel,\n      goal: goalValue,\n      goalLabel: goalLabel,\n      equipment: equipmentValue,\n      equipmentLabel: equipmentLabel,\n      frequency: frequencyValue,\n      considerations: considerationsValue\n    };\n  }\n}\n\nexport default Parameters;\n","/**\n * marked v12.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            // precede setext continuation with 4 spaces so it isn't a setext\n            let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n            text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(lang)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","import { marked } from 'marked';\n\nclass Results {\n  constructor(container) {\n    this.container = container;\n    this.currentContent = '';\n  }\n  \n  render() {\n    // No initial rendering needed as content will be set later\n    this.container.innerHTML = '';\n  }\n  \n  setContent(content) {\n    if (!content) {\n      this.container.innerHTML = '<p>No training plan content available.</p>';\n      this.currentContent = '';\n      return;\n    }\n    \n    this.currentContent = content;\n    \n    // Convert markdown to HTML for better formatting\n    const htmlContent = marked.parse(content);\n    \n    // Create a wrapper div with the results-content class\n    const contentDiv = document.createElement('div');\n    contentDiv.className = 'results-content';\n    contentDiv.innerHTML = htmlContent;\n    \n    // Clear container and append the new content\n    this.container.innerHTML = '';\n    this.container.appendChild(contentDiv);\n  }\n  \n  getContent() {\n    return this.currentContent;\n  }\n  \n  copyToClipboard() {\n    if (!this.currentContent) {\n      alert('No content to copy to clipboard.');\n      return;\n    }\n    \n    navigator.clipboard.writeText(this.currentContent)\n      .then(() => {\n        // Create a temporary element for the success message\n        const message = document.createElement('div');\n        message.textContent = 'Training plan copied to clipboard!';\n        message.style.cssText = `\n          position: fixed;\n          bottom: 20px;\n          left: 50%;\n          transform: translateX(-50%);\n          background-color: black;\n          color: white;\n          padding: 10px 20px;\n          border-radius: 4px;\n          z-index: 1000;\n        `;\n        \n        document.body.appendChild(message);\n        \n        // Remove the message after 3 seconds\n        setTimeout(() => {\n          document.body.removeChild(message);\n        }, 3000);\n      })\n      .catch(err => {\n        console.error('Failed to copy content: ', err);\n        alert('Failed to copy to clipboard. Please try again.');\n      });\n  }\n}\n\nexport default Results;\n","class Toggle {\n  constructor(container, onChange) {\n    this.container = container;\n    this.onChange = onChange;\n    this.toggleCheckbox = null;\n  }\n  \n  render() {\n    this.container.innerHTML = '';\n    \n    const toggleSwitch = document.createElement('div');\n    toggleSwitch.className = 'toggle-switch';\n    \n    // Create left label (Quick Response)\n    const quickLabel = document.createElement('span');\n    quickLabel.className = 'toggle-label';\n    quickLabel.textContent = 'Quick Response';\n    \n    // Create toggle switch container\n    const toggleWrapper = document.createElement('div');\n    toggleWrapper.className = 'toggle-wrapper';\n    \n    // Create checkbox input\n    this.toggleCheckbox = document.createElement('input');\n    this.toggleCheckbox.type = 'checkbox';\n    this.toggleCheckbox.id = 'mode-toggle';\n    this.toggleCheckbox.className = 'toggle-checkbox';\n    \n    // Create the slider element\n    const toggleSlider = document.createElement('label');\n    toggleSlider.setAttribute('for', 'mode-toggle');\n    \n    // Create right label (Deep Senzu Research)\n    const advancedLabel = document.createElement('span');\n    advancedLabel.className = 'toggle-label';\n    advancedLabel.textContent = 'Deep Senzu Research';\n    \n    // Add event listener\n    this.toggleCheckbox.addEventListener('change', () => {\n      if (this.onChange) {\n        this.onChange(this.toggleCheckbox.checked);\n      }\n    });\n    \n    // Append elements to toggle wrapper\n    toggleWrapper.appendChild(this.toggleCheckbox);\n    toggleWrapper.appendChild(toggleSlider);\n    \n    // Append all elements to toggle switch\n    toggleSwitch.appendChild(quickLabel);\n    toggleSwitch.appendChild(toggleWrapper);\n    toggleSwitch.appendChild(advancedLabel);\n    \n    this.container.appendChild(toggleSwitch);\n  }\n  \n  // Get the current toggle state\n  getState() {\n    return this.toggleCheckbox ? this.toggleCheckbox.checked : false;\n  }\n  \n  // Set the toggle state programmatically\n  setState(isAdvanced) {\n    if (this.toggleCheckbox) {\n      this.toggleCheckbox.checked = isAdvanced;\n      \n      if (this.onChange) {\n        this.onChange(isAdvanced);\n      }\n    }\n  }\n}\n\nexport default Toggle;\n","// Your Render deployment URL\nconst RENDER_URL = 'https://senzu-athlete-lab-api.onrender.com';\n\nconst API_BASE_URL = process.env.NODE_ENV === 'production'\n  ? `${RENDER_URL}/api`\n  : 'http://localhost:3001/api';\n\nclass ApiService {\n  async generateTrainingPlan(data) {\n    try {\n      // Transform the data to match the server's expected format\n      const transformedData = {\n        sport: {\n          category: data.sport.category.id,\n          categoryLabel: data.sport.category.name,\n          specific: data.sport.sport.id,\n          specificLabel: data.sport.sport.name\n        },\n        parameters: data.parameters,\n        responseMode: data.responseMode\n      };\n\n      console.log('Sending data to server:', transformedData);\n\n      const response = await fetch(`${API_BASE_URL}/generate-plan`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(transformedData)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to generate training plan');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new ApiService();\nexport default apiService;\n","import SportSelection from './components/SportSelection.js';\nimport Parameters from './components/Parameters.js';\nimport Results from './components/Results.js';\nimport Toggle from './components/Toggle.js';\nimport apiService from './api/apiService.js';\n\nclass App {\n  constructor() {\n    // DOM elements\n    this.inputSection = document.getElementById('input-section');\n    this.resultsSection = document.getElementById('results-section');\n    this.generateBtn = document.getElementById('generate-btn');\n    this.copyBtn = document.getElementById('copy-btn');\n    this.backBtn = document.getElementById('back-btn');\n    this.loadingIndicator = document.getElementById('loading');\n    \n    // Components\n    this.sportSelection = null;\n    this.parameters = null;\n    this.results = null;\n    this.toggle = null;\n    \n    // State\n    this.currentResponseMode = 'quick_response'; // 'quick_response' or 'deep_senzu_research'\n    this.currentPlan = null;\n  }\n  \n  init() {\n    // Initialize components\n    this.sportSelection = new SportSelection(document.getElementById('sport-selection'));\n    this.parameters = new Parameters(document.getElementById('parameters'));\n    this.results = new Results(document.getElementById('results-content'));\n    this.toggle = new Toggle(\n      document.getElementById('toggle'), \n      this.handleToggleChange.bind(this)\n    );\n    \n    // Add event listeners\n    this.generateBtn.addEventListener('click', this.handleGenerateClick.bind(this));\n    this.copyBtn.addEventListener('click', this.handleCopyClick.bind(this));\n    this.backBtn.addEventListener('click', this.handleBackClick.bind(this));\n    \n    // Render components\n    this.sportSelection.render();\n    this.parameters.render();\n    this.toggle.render();\n  }\n  \n  // Event handlers\n  async handleGenerateClick() {\n    const sportData = this.sportSelection.getSelectedSport();\n    const parametersData = this.parameters.getParametersData();\n    \n    if (!this.validateInputs(sportData, parametersData)) {\n      return;\n    }\n    \n    this.showLoading(true);\n    \n    try {\n      const planData = await apiService.generateTrainingPlan({\n        sport: sportData,\n        parameters: parametersData,\n        responseMode: this.currentResponseMode\n      });\n      \n      this.currentPlan = planData;\n      this.showResults();\n      this.results.setContent(planData[this.currentResponseMode]);\n    } catch (error) {\n      console.error('Error generating plan:', error);\n      alert('An error occurred while generating your training plan. Please try again.');\n    } finally {\n      this.showLoading(false);\n    }\n  }\n  \n  handleToggleChange(isAdvanced) {\n    this.currentResponseMode = isAdvanced ? 'deep_senzu_research' : 'quick_response';\n    if (this.currentPlan) {\n      this.results.setContent(this.currentPlan[this.currentResponseMode]);\n    }\n  }\n  \n  handleCopyClick() {\n    this.results.copyToClipboard();\n  }\n  \n  handleBackClick() {\n    this.showInputForm();\n  }\n  \n  // Helper methods\n  validateInputs(sportData, parametersData) {\n    if (!sportData || !sportData.category || !sportData.sport) {\n      alert('Please select a sport category and specific sport.');\n      return false;\n    }\n    \n    if (!parametersData.experience || !parametersData.goal) {\n      alert('Please fill in all required fields.');\n      return false;\n    }\n    \n    return true;\n  }\n  \n  showLoading(show) {\n    if (show) {\n      this.loadingIndicator.classList.remove('hidden');\n    } else {\n      this.loadingIndicator.classList.add('hidden');\n    }\n  }\n  \n  showResults() {\n    this.inputSection.classList.add('hidden');\n    this.resultsSection.classList.remove('hidden');\n  }\n  \n  showInputForm() {\n    this.resultsSection.classList.add('hidden');\n    this.inputSection.classList.remove('hidden');\n  }\n}\n\nexport default App;\n","import App from './App.js';\n\n// Initialize the application when the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new App();\n  app.init();\n});\n"],"names":["SportSelection","container","formRow","categoryDiv","categoryLabel","key","value","option","specificDiv","specificLabel","selectedCategory","sport","categoryValue","sportValue","category","s","Parameters","row1","experienceDiv","experienceLabel","level","goalDiv","goalLabel","goal","row2","equipmentDiv","equipmentLabel","equipment","frequencyDiv","frequencyLabel","i","considerationsDiv","considerationsLabel","experienceValue","goalValue","equipmentValue","frequencyValue","considerationsValue","experience","e","g","_getDefaults","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","unescapeTest","unescape","_","n","caret","edit","regex","opt","source","obj","name","val","valSource","cleanUrl","href","noopTest","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","rtrim","c","invert","l","suffLen","findClosingBracket","b","outputLink","cap","link","raw","lexer","title","text","token","indentCodeCompensation","matchIndentToCode","indentToCode","node","matchIndentInNode","indentInNode","_Tokenizer","options","__publicField","src","trimmed","top","tokens","bull","isordered","list","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","nextLine","indent","blankLine","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","spacers","hasMultipleLineBreaks","tag","headers","aligns","rows","item","align","header","cell","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastCharLength","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_a","newline","blockCode","fences","hr","heading","bullet","lheading","_paragraph","blockText","_blockLabel","def","_tag","_comment","paragraph","blockquote","blockNormal","gfmTable","blockGfm","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","punctuation","blockSkip","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","_inlineLabel","reflink","nolink","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","block","inline","_Lexer","rules","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","startIndex","tempSrc","tempStart","getStartIndex","errMsg","keepPrevChar","_Renderer","code","infostring","lang","quote","body","ordered","start","type","startatt","task","checked","content","flags","cleanHref","out","_TextRenderer","_Parser","genericToken","ret","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","loose","itemBody","checkbox","htmlToken","paragraphToken","textToken","renderer","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","markdown","Marked","args","__privateAdd","_Marked_instances","__privateMethod","parseMarkdown_fn","callback","values","_b","childTokens","extensions","pack","opts","ext","prevRenderer","extLevel","prop","rendererProp","rendererFunc","tokenizer","tokenizerProp","tokenizerFunc","prevTokenizer","hooks","hooksProp","hooksFunc","prevHook","arg","walkTokens","packWalktokens","parser","origOpt","throwError","onError_fn","silent","async","msg","markedInstance","marked","Results","htmlContent","contentDiv","message","err","Toggle","onChange","toggleSwitch","quickLabel","toggleWrapper","toggleSlider","advancedLabel","isAdvanced","RENDER_URL","API_BASE_URL","ApiService","data","transformedData","response","errorData","error","apiService","App","sportData","parametersData","planData","show"],"mappings":"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","x_google_ignoreList":[2]}